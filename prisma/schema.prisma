// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id                   Int              @id @default(autoincrement())
  name                 String?
  email                String           @unique
  emailVerified        DateTime?
  image                String?
  role                 Role             @default(PATIENT)
  appointmentsAsPatient Appointment[]    @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[]    @relation("DoctorAppointments")
  medicalHistories     MedicalHistory[]
  accounts             Account[]
  sessions             Session[]
  specialization       String?          // For doctors only
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model Appointment {
  id           Int               @id @default(autoincrement())
  patient      User              @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId    Int
  doctor       User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId     Int
  scheduledAt  DateTime
  status       AppointmentStatus @default(PENDING)
  priority     Priority          @default(LOW)
  notes        String?
  paymentStatus Boolean          @default(false)
  paymentId    String?
  fee          Float             @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  prescription Prescription?
}

model MedicalHistory {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  description String
  attachments String?
  createdAt   DateTime @default(now())
}

model Prescription {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int         @unique
  medication    String
  dosage        String
  instructions  String
  createdAt     DateTime    @default(now())
}

// NextAuth Models
model Account {
  id                 String    @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}